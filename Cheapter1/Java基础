java语言执行过程：
      .java------->.class----------------->机器可理解的代码
            javac         jvm(解释器和jit)       
因为在java"一次编译，处处运行"的特性，所以java执行过程分为了两部分，如上图所示。因为这一特点所以Java性能通常不如c，c++等一次编译语言，为了优化java性能，java引入了jit编译器：
当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行
的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行
在jvm解释执行过程中，会收集程序运行信息，在这些信息基础上jit编译器会逐步发挥作用，它会将那些在一定时间内调用超过次数的方法和代码块编译成字节码，jvm将次数设置了一个阈值，将那些
超过了阈值的方法和代码块编译存入codeCache，下次执行时直接codeCache中的机器码读取直接执行，提升程序执行性能。
